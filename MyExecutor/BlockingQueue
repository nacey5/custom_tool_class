import java.util.ArrayDeque;
import java.util.Deque;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
/**
 * @author DAHUANG
 * @date 2022/8/9
 */
class BlockingQueue<T>{
    //任务队列
    private Deque<T> queue=new ArrayDeque<>();
    //锁
    private ReentrantLock lock=new ReentrantLock();
    //生产者条件变量
    private Condition fullWaitSet=lock.newCondition();
    //消费者条件变量
    private Condition emptyWaitSet=lock.newCondition();
    //容量
    private int capcity;

    /**
     *带超时的阻塞获取
     * @return
     */
    public T poll(long timeout, TimeUnit timeUnit){
        lock.lock();
        try {
            //将timeout统一转换为 纳秒
            long nanos = timeUnit.toNanos(timeout);
            while (queue.isEmpty()){
                try {
                    //返回的是剩余时间
                    if (nanos<=0){
                        return null;
                    }
                    nanos = emptyWaitSet.awaitNanos(nanos);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            T t = queue.removeFirst();
            fullWaitSet.signal();
            return t;
        }
        finally {
            lock.unlock();
        }
    }


    /**
     * 阻塞获取
     * @return
     */
    public T take(){
        lock.lock();
        try {
            while (queue.isEmpty()){
                try {
                    emptyWaitSet.await();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            T t = queue.removeFirst();
            fullWaitSet.signal();
            return t;
        }
        finally {
            lock.unlock();
        }
    }


    /**
     * 阻塞添加
     * @param element
     */
    public void put(T element){
        lock.lock();
        try {
            while (queue.size()==capcity){
                fullWaitSet.await();
            }
            queue.addLast(element);
            emptyWaitSet.signal();
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            lock.unlock();
        }
    }


    /**
     * 获取大小
     * @return
     */
    public int size(){
        lock.lock();
        try {
            return queue.size();
        }finally {
            lock.unlock();
        }
    }

}
